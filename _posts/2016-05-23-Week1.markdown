---
title: Journal for Week 1
categories: journal entry
---

###Current plan for the week
1. (Monday/Tuesday) Adam Bashforth methods
  + Shift to open development and clean up code
  + Test with IVPTestSuite.jl
  + Add Documentation 
  + Run by Mauro and Jiaho to get feedback and see how to best fit Julia coding conventions, etc.
2. (Tuesday/Wednesday) Getting comfortable with IVPTestSuite.jl
  + Run with preexisting solvers
  +  Add a new stiff and non-stiff test case
3. (Wednesday/Thursday) Explore JuliaParallel
  +  Look at solvers there implemented
  +  Look at the tests in ts.jl  
4. (Thursday/Friday) Explore BenchmarkTools.jl as side project (if time permits)
  +  Run demos with the package
  +  Write a small summary of the pro's and con's of using it, as I see it, and run it by Mauro
  +  Reach out to @jrevels
5. (Friday/Saturday) Begin implementing Implicit solver RADUA
  +  Read relevant literature
  +  Come up with a overall sketch of the solver
  +  Start coding
6. (Saturday) A Blog post recapping the first week 

###Journal entry: #1
* Skype called with Mauro this morning to talk overall vision, and goals for today
* Worked on using Jiaho's edits to my demo to code Adam Bashforth. Tried to model code after solvers in ODE.jl. Was careful to only use Hairier et al (pg 357-358). (See https://github.com/obiajulu/ODE.jl/blob/master/src/adam_bashforth.jl)
* Spent tonight of the day setting up Juno environment for development, and getting much more comfortable with Git and the Julia Dev Workflow
* Posted a question on slack asking other students and developers about what workflow they used

###Journal entry: #2
* A big focus of the early morning was diving into the Juno Development workflow. It took a little longer than I was hoping, but by the end of the earlier morning I was using the [Juno way of  developing](https://github.com/JunoLab/atom-julia-client/blob/49d09ebb86872ac145fe014e432b828ca01a3a2c/manual/workflow.md) pretty comfortably, which is actually fairly painless. I also, throughout the course of the day, learned more about git and I now see why so many people choose it for version control.
* With the development workflow solidified, I could focus on neatly coding the Adam Bashforth solver (ode\_ab). Currently, I have all of the code for this solver in \\src\\adam\_bashforth.jl, in the same folder with runge\_kutta.jl and ODE.jl. I had an initial solver up by the afternoon, then changed pace and worked on IVPTestSuite.jl related tasks (see below). Returning to Adam Bashforth during the night, I continued to tidy up the code and then added the solver through \\test\\runtests.jl. Currently, there are two branches of the project, master and dev. The most up-to-date version is in dev, and I opened a [PR](https://github.com/obiajulu/ODE.jl/pull/1) from dev to master, mostly so that my mentors could see what I am working on. Happy to see ode_ab passed the tests in runtests.jl, but the real goal is to link up with IVPTestSuite.jl, as a way to perform further tests, but also to get more familiar with IVPTestSuite.jl
* I explored IVPTestSuite.jl during the afternoon today. I read through some of @mauro3's documentation, and looked around at the code in the package. I created a new branch called dev1, and updated some of the deprecated parts of the code. I tried getting ex1.jl and ex2.jl to run, but currently I keep getting the following errors ```UndefVarError: tc_all not definded``` and ```LoadError: LoadError: LoadError: LoadError: UndefVarError: ode23_bs not defined```. I spend some time trying to figure these out today, and am curious if @mauro3 might know what is going on. I think I'll spend most of my time tomorrow on IVPTestSuite.jl, and see if I can get to the bottom of these errors, added a new testcase, and maybe add the ode_ab solver, just to get comfortable with the package. 
* I am a little behind where I wanted to be, but I have grown a lot in my comfort with Julia Development via Juno and the whole Git interface, and I hope learning these all well early will pay off later. 

###Journal entry: #3
* The main focus of the morning was coding the implicit Adam-Bashforth-Multon method using the PECE scheme from Hairer. This was successfully implemented, in a coding style to closely models the solver ode\_ms. The code is accessible [here](https://github.com/obiajulu/ODE.jl/blob/eac554a0e9f1fa3f37567c11e787ab1ff96c6f39/src/adam_bashforth.jl). I am simply awaiting final comments from my mentor to finish the pull request. The question remains, however, if we will pursue implementing any further Adam methods. I'm looking forward to reading more of Hairer tomorrow morning to help us make an informed decision.
* Used my afternoon/evening to switch gears and focus on IVPTestSuite. Most of the afternoon was spent trying to get to package working correctly. I ran into trouble with the required package Sundials, but after manual tweaking, I was able to get this dependency package working. IVPTestSuite soon followed suite in functionally, thanks to @mauro3's commits from yesterday. So after I was finally able to get the  IVPTestSuite up and running, I added the new ODE solver to the package, and added an example file ([ex3.jl](https://github.com/mauro3/IVPTestSuite.jl/blob/241f279a68c2a339807412b2ea5cf51b9b8db5f4/examples/ex3.jl)) which uses it to demo the fixed step solver testing. This example worked locally for me (seeing as locally, my ODE package has ode\_imp\_ab). Currently the build is [still failing](https://travis-ci.org/mauro3/IVPTestSuite.jl/builds/133022933) on Travis, but some of this is due to the fact that code implementing ode\_imp\_ab has not yet to be merged. Overall, though, I am much more comfortable with the IVPTestSuite package, and will still hope to add a new test case tomorrow. 
* The original plan of exploring JuliaParrelel today and/or tomorrow has been changed, and this will likely instead be done sometime in the short future. This gave way to more relevant and pressing tasks, like getting IVPTestSuite up and running. 

###Journal entry: #4
* Busy and productive day today, where to begin...
* Spent some time in the morning putting the finishing touches on 'ode_imp_ab.' Whether or not this gets incorporated in ODE.jl, it was still a great first solver to code and I definitely learned a lot about Julia, ODE.jl, git, and GitHub through it all.
* @mauro3 and I were finally able to get the Travis build of IVPTestSuite passing. There were a few lingering deprecations, but more noteworthy, it seems that ode45_dp mysterious became less precise on threebody. We glossed over this for now, but it is something that we may revisit. We also ran into a problem with Requires.jl, which seems not to be quite ready for Julia nightly, so we had to scratch the nightly build. 
* Compiled some good sections of Hairier for my mentor and I to read this week this evening 
  1. Adaptive Adams Methods:(Vol 1) III.5, III.7; reading these should help us decide if we want to continue with the Adams methods. I think it may be worth asking the ODE community, though, because there is no need making a solver that will not be useful when others are still in demand. Still, nevertheless, its always good to learn more about canoncial solvers like Adams
  2. Radua IIA: (Vol 2) IV.5 (72-74), IV.10; from just scanning IV.10, I see why RADUA is in demand. It performs very well on very stiff problems
  3. Non stiff test cases: (Vol 1) II.10 (Pg 299 onwards), II.14(Pg 296 onwards)
  4. Stiff test cases: (Vol 2) IV.10 
* Spent the night trying to figure out a good way of being able to test pwl PR's inside of IVPTestSuite, in a way that could be used for future pull requests and that does not require a complete overhaul of IVPTestSuite due to switch ODE packages. The trouble ultimate comes from not being able to include unregistered packages in the REQUIRES file, for if we could, we would simply require something like ODE_dev in addition to ODE. The solution I am exploring right now depends on the DeclarativePackages.jl package, which should allow us to do something similiar by allowing 'declared' packages to be set using github url. So this is somewhat of an analogue to including unregistered packages, and then we could simply use 'using ODE' and 'import ODE/_pwl_PR'. All of this experimentation is going on in the newly created ob/DECLARE, which is currently failing the Travis build. We'll see if that is a viable solution tomorrow.
