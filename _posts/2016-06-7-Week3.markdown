---
title: Journal for Week 3
categories: journal entry
---

###Up-to-date plan for the week
1. (Monday) Main goal: Search for the main root of the `ode_ab_adaptive` solver bug
  + ~~Tidy up `ode_ab_adaptive` code to make it easier to find bug~~
  + ~~Run battery of tests to see what is working and what is not~~
  + ~~Continue converting IVPTestSuite.jl from using metaprogramming to a dictionary (`m3/meta-gone` branch)~~
2. (Tuesday) Main goal: Completely eradicate bug in `ode_ab_adaptive` solver
  + ~~Get adaptive step selection working~~
3. (Wednesday) Main goal: ~~Examine performance of `ode_ab_adaptive`~~ Optimize `ode_ab_adaptive`
  + ~~Optimize memory usage and computation complexity of `ode_ab_adaptive`~~
  + ~~Implement adaptive order selection of for `ode_ab_adaptive`, following the DEABM scheme presented in Harier III.7~~
  + ~~Finishing converting IVPTestSuite.jl from using metaprogramming to a dictionary (`m3/meta-gone` branch)~~
  + ~~Finishing converting IVPTestSuite.jl from Winston to PyPlot for plotting~~
  +  ~~Start trying to use IVPTestSuite tests against `ode_ab_adaptive`~~
4. (Thursday) Main goal: Run IVPTestSuite against `ode_ab_adaptive` and @pwl's PR
  + Skype about `ode_ab_adaptive` performance results
  + Continue trying to use IVPTestSuite tests against `ode_ab_adaptive`
  + Run more tests with new `plei.jl` test case, and merge into main if ready
  + Locally run more tests of @pwl's PR with IVPTestSuite.jl, then create a ticket to send to @pwl
4. (Thursday - Saturday) Main goal: Test and tidy up `ode_ab_daptive` with IVPTestSuite and start collecting data for JuliaCon talk

###Journal entry: #12
* Continued work on on debugging the [adaptive Adam-Bashforth](https://github.com/obiajulu/ODE.jl/blob/7ba7bb26a246c365d9603fee030cdf6e674cacd0/src/adam_bashforth_adaptive.jl) solver on my ob/a-b_adaptive branch of my fork of ODE.jl. Made some improvements. I have definitely narrowed the problem down to one point in the code, when the algorithm picks the next desired step size. I ran a battery of tests, which confirm this. For example, I used random, preassigned steps sizes, and found that if they were small enough, the solver yielded the correct results. This is important because it shows that the other parts of the algorithm are working (calculating the complicated recurrence relationships, etc). However, when I turn on the step selection, the step sizes seem to be 10 times too large. I'm still struggling to see why this is, but I am happy that I am at least making some progress. It is certainly increasing my patience!
* Also, I Skyped with @mauro3 and @jiahao today, who gave me many good test cases I ran today, which helped me isolate where the issues are.
* Also, I briefly spend sometime continuing the switch away from metaprogramming to using a dictionary in IVPTestSuite.


###Journal entry: #13
* Once again, worked on debugging. [adaptive Adam-Bashforth](https://github.com/obiajulu/ODE.jl/blob/7ba7bb26a246c365d9603fee030cdf6e674cacd0/src/adam_bashforth_adaptive.jl) solver. Today I was able to get the adaptive step selection to work for the first time.  The problem was with how the norm of the truncation error was being calculated. Namely, I wasn't dividing by a factor of `reltol` and/or `abstol` in its computation, as is done in eq 4.11 on page 168. This greatly increases the norm, since these values are taken <<1. Since, as shown in eq 7.5 on pg 423, the next step size is inversely proportional to the norm of the error, this increase in the norm lead to the desired decrease in the step size. The upshot, though, is that the step size heavily depends on `reltol` and `abstol`. Taken too large, and the step sizes become much larger resulting in a poor result. Take them too small, and the step sizes are unnecessarily small, wasting computation time. However, this seems to be inherit to the algorithm, seeing as the norm of LE in equation 7.5 is dependent on `reltol` and `abstol.` Indeed, the graph for the DEABM solver on (fig 7.1 on pg 424) show the dependence on what tolerance the code is run at.  
* Tomorrow, I am looking forward to running more tests with `ode_ab_adaptive`. Namely, there are many questions I hope to be able to answer
  * How does `ode_ab_adaptive` compare against other adaptive solvers for nonstiff equations, such as `ode78`, `ode23` or `ode45`?
  * What is the best default setting for `reltol` and `abstol` for `ode_ab_daptive`?
  * Can I reduce the runtime by being more careful with array sizes, element types, and redunancy?
  
###Journal entry: #13
* Today was a pretty big day. I greatly reduced the runtime of  [`ode_ab_adaptive`](https://github.com/obiajulu/ODE.jl/blob/7ba7bb26a246c365d9603fee030cdf6e674cacd0/src/adam_bashforth_adaptive.jl) by an order or so by being much smarter with memory usage. I also implemented an adaptive order selection algorithm, which will increase or decrease the `steporder` to best reduce error. These two tasks were big successes, and took a big part of the day
* Towards the end of the day, I work on finishing the conversion away from metaprogramming towards the usage of a dictionary in IVPTestSuite.jl. All of these changes are currently on the `m3/meta-gone` branch, and I am hoping to merge this with the master tomorrow. I'll bring it up when I talk to my mentors over Skype
* Also, I finished the change away from the deprecated Winston package to PyPlot for plotting in IVPTestSuite.jl. With this, I was able to start to try to run IVPTestSuite.jl against `ode_ab_adaptive`. Though, there seems to be a bug I have to work out. 
* Overall, today was a fruitful day in terms of finishing off a number of items on my to-do list. 
